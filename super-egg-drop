// Time Complexity :O(n^2* k)
// Space Complexity :O(n*K)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no
// Your code here along with comments explaining your approach:Dp approach with Dp as number of eggs as rows and number of floors as columns

class Solution {
    public int superEggDrop(int k, int n) {
        int[][] dp = new int[k + 1][n + 1];
        for (int j = 0; j <= n; j++) {
            dp[1][j] = j;
        }
        for (int i = 2; i <= k; i++) {
            for (int j = 1; j <= n; j++) {
                  int minEl=99999;
                  for(int f=1;f<=j;f++){
                  int localMax = 1+ Math.max(dp[i-1][f-1],dp[i][j-f]);
                     minEl=Math.min(minEl,localMax);
                     }
                   dp[i][j]=minEl;
                  }
        }
        return dp[k][n];
    }
}

// Time Complexity :O(n^2)
// Space Complexity :O(n*K)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no
// Your code here along with comments explaining your approach:Dp approach with number of attemps and number of eggs,number of attemps(n) as rows and number of eggs as columns
class Solution {
    public int superEggDrop(int k, int n) {
        int[][] dp = new int[n + 1][k + 1];
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= k; j++) {
                  dp[i][j]=1+dp[i-1][j-1]+dp[i-1][j];
                   if(dp[i][j] >= n){
                   return i;
                   }
                  }
        }
         return dp[n][k];
      
    }
}