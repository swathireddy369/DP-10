// Time Complexity :O(n^3)
// Space Complexity :O(n^2)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no
// Your code here along with comments explaining your approach:

class Solution {
    public int maxCoins(int[] nums) {
        int n=nums.length;

        int[][] dp=new int[n][n];
        for(int le=1;le<=n;le++){//all possible lengths
              for(int i=0 ; i <= n-le;i++){//pair starts
               int j=i+le-1;//pair ends
                int sum=0;
                  int max=Integer.MIN_VALUE;
                  //exploring all possiblities in one pair
                    for(int k=i;k<=j;k++){
                    int left=0;
                    if(k != i){
                           left=dp[i][k-1];//which is already calculated
                    }
                    int right=0;
                    if(k != j){
                       right=dp[k+1][j]; //which is already calculated
                    }
                    int before=1;
                    if(i != 0){
                       before=nums[i-1]; //(i-1)ballon painted value
                    }
                    int after=1;
                    if(j != n-1){
                     after=nums[j+1]; //(i+1)ballon painted value
                    }
                    sum=left+(before*nums[k]*after)+right; //total sum for single k
                    max=Math.max(max,sum);//taking maximunm amount all possible k in single pair
                    }
                dp[i][j]=max;//adding max to dp
            }
        }
        return dp[0][n-1];//final max result
        
    }
}